<project name="ens" default="dist" basedir=".">
    <import file="../ENdoSnipe/build_common.xml" />

    <!-- ★変数設定★ -->
    <property name="app.name" value="WebDashboard"/>

    <!-- パス設定 -->
    <property name="src.path"           value="${basedir}/src/main/java"/>
    <property name="src.test.dir"       value="${basedir}/src/test/java"/>
    <property name="resource.path"      value="${basedir}/src/main/resources"/>
    <property name="resources.test.dir" value="${basedir}/src/test/resources"/>
    <property name="lib.path"           value="${basedir}/lib"/>
    <property name="lib-dependency.dir" value="${lib.path}/dependency"/>
    <property name="webroot.path"       value="${basedir}/WebContent"/>
    <property name="weblib.path"        value="${webroot.path}/WEB-INF/lib"/>
    <property name="webclass.path"      value="${webroot.path}/WEB-INF/classes"/>
    <property name="report.dir"         value="${basedir}/junit-report" />
    <property name="deploy.path"        value="${basedir}/target"/> 
    <property name="classes.path"       value="${deploy.path}/classes"/>
    <property name="test.dir"           value="classes-test"/>
    <property name="classes.test.dir"   value="${deploy.path}/${test.dir}" />
    <property name="jar.file"           value="${deploy.path}/endosnipe-${app.name}.jar"/> 
    <property name="war.file"           value="${deploy.path}/${app.name}.war"/> 

    <property name="javadoc.path"       value="${deploy.path}/docs"/>
    <property name="javadoc.package"    value="jp.co.acroquest.*"/>
    <property name="javadoc.title"      value="Acroquest Technology Project"/>
    <property name="copyright"          value="Copyright (c) Acroquest Technology Co., Ltd. All rights reserved."/>

    <path id="project.classpath">
        <pathelement path ="${classes.path}"/>
        <fileset dir="${weblib.path}">
            <include name="**/*.jar"/>
            <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${lib.path}">
            <include name="**/*.jar"/>
            <include name="**/*.zip"/>
            <exclude name="sources/*.jar"/>
        </fileset>
    </path>

    <!-- テストクラスコンパイル用のクラスパス -->
    <path id="compile.test.classpath">
        <path refid="project.classpath"/>
        <pathelement location="${classes.dir}"/>
        <fileset dir="${lib-dependency.dir}">
            <include name="junit-*.jar"/>
        </fileset>
    </path>

    <!-- ディレクトリの作成 -->
    <target name="prepare" description="プロジェクトに必要なディレクトリを作成する">
        <mkdir dir="${classes.path}"/>
        <mkdir dir="${classes.test.dir}"/>
        <tstamp/>
    </target>

    <!-- 以前のビルドにより構築したクラスファイルの削除、
         コピーしたプロパティファイルの削除 -->
    <target name="clean" description="以前にビルドされたファイルを削除する">
      <delete dir="${classes.path}"/>
      <delete dir="${webclass.path}"/>
    </target>

    <!-- リソースファイルのビルドパスへのコピー -->
    <target name="resources"
            description="リソースファイルをビルドファイル配下にコピーします">
        <copy todir="${classes.path}" includeEmptyDirs="no">
            <fileset dir="${resource.path}"/>
        </copy>
    </target>

    <!-- SQLファイルのビルドパスへのコピー -->
    <target name="sql"
            description="リソースファイルをビルドファイル配下にコピーします">
        <copy todir="${classes.path}" includeEmptyDirs="no">
            <fileset dir="${src.path}">
                <include name="**/*.sql"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" depends="clean,prepare,resources,sql" description="ソースファイルをコンパイルする">
        <!-- 依存ライブラリをコピー -->
        <copy file="${endosnipe-common.jar}" todir="${weblib.path}" failonerror="yes" />
        <copy file="${endosnipe-communicator.jar}" todir="${weblib.path}" failonerror="yes" />
        <copy file="${endosnipe-dataaccessor.jar}" todir="${weblib.path}" failonerror="yes" />
        <javac srcdir       = "${src.path}"
               destdir      = "${classes.path}"
               encoding     = "UTF-8"
               classpathref = "project.classpath"
               debug        = "true"/>
    </target>

    <!-- テストソースのコンパイル -->
    <target name="compile-test" depends="compile" description="テストソースをコンパイルする">
        <javac srcdir="${src.test.dir}" destdir="${classes.test.dir}" debug="on">
            <classpath>
                <path refid="compile.test.classpath" />
            </classpath>
        </javac>

        <!-- リソースをコピーする -->
        <copy todir="${classes.test.dir}">
            <fileset dir="${resources.test.dir}" />
        </copy>
    </target>

    <!-- JUnit テストの実行 -->
    <target name="runtest" depends="compile-test">
        <!--
        <mkdir dir="${report.dir}" />

        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <path refid="project.classpath" />
                <pathelement location="${classes.dir}" />
                <pathelement location="${classes.test.dir}" />
            </classpath>
            <formatter type="plain" />
            <batchtest fork="no" todir="${report.dir}">
                <fileset dir="${src.test.dir}">
                    <include name="**/*Test.java" />
                    <exclude name="**/Abstract*Test.java" />
                </fileset>
            </batchtest>
        </junit>
     -->
    </target>

    <!-- JARファイル生成 -->
    <target name="jar" depends="runtest" description="JARファイルを生成する">
        <jar basedir="${classes.path}" jarfile="${jar.file}" excludes="env.txt,log4j.properties"/>
    </target>

    <!-- WARファイル生成 -->
    <target name="war" depends="jar" description="WARファイルを生成する">
        <copy file="${jar.file}" todir="${weblib.path}" overwrite="true"/>
        <copy file="${classes.path}/EWDMessages_ja.properties" todir="${webroot.path}/WEB-INF/classes" overwrite="true"/>
        <copy file="${classes.path}/log4j.xml" todir="${webroot.path}/WEB-INF/classes" overwrite="true"/>
        <war basedir="${webroot.path}"
             destfile="${war.file}"
             webxml="${webroot.path}/WEB-INF/web.xml">
        </war>
    </target>

    <!-- リリースアーカイブの生成 -->
    <target name="dist" depends="war" description="Build a zip distributable">
        <!--
        <copy file="tomcat_config/conf/server.xml" todir="${deploy.path}"/>
        -->

        <delete dir="${classes.path}" />
        <delete file="${jar.file}" />

        <!-- Create zipfile. -->
        <zip destfile="${app.name}-product.zip">
            <zipfileset dir="${deploy.path}" includes="**" excludes="${test.dir}/**"/>
        </zip>
    </target>
    
    <!-- Javadoc 生成 -->
    <target name="javadoc" depends="prepare" description="Javadoc を生成する">
        <mkdir dir="${javadoc.path}"/>

        <!-- 過去に出力した Javadoc を削除 -->
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${javadoc.path}"/>
        </delete>

        <!-- Javadoc 出力ディレクトリ作成 -->
        <mkdir dir="${javadoc.path}" />

        <!-- Javadoc 生成 -->
        <javadoc packagenames  = "${javadoc.package}"
                 sourcepath    = "${src.path}"
                 classpathref  = "project.classpath"
                 destdir       = "${javadoc.path}"
                 access        = "protected"
                 encoding      = "UTF-8"
                 docencoding   = "Shift_JIS"
                 locale        = "ja_JP"
                 windowtitle   = "${javadoc.title}"
                 bottom        = "${copyright}" />
    </target>
</project>
